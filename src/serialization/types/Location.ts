/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as UsedeltaApi from "../../api";
import * as core from "../../core";

export const Location: core.serialization.ObjectSchema<serializers.Location.Raw, UsedeltaApi.Location> =
    core.serialization.object({
        id: core.serialization.string(),
        platformId: core.serialization.property("platform_id", core.serialization.string().optional()),
        name: core.serialization.string().optional(),
        type: core.serialization.lazy(async () => (await import("..")).LocationType).optional(),
        status: core.serialization.lazy(async () => (await import("..")).LocationStatus).optional(),
        address1: core.serialization.string().optional(),
        address2: core.serialization.string().optional(),
        postalCode: core.serialization.property("postal_code", core.serialization.string().optional()),
        city: core.serialization.string().optional(),
        region: core.serialization.string().optional(),
        countryCode: core.serialization.property("country_code", core.serialization.string().optional()),
    });

export declare namespace Location {
    interface Raw {
        id: string;
        platform_id?: string | null;
        name?: string | null;
        type?: serializers.LocationType.Raw | null;
        status?: serializers.LocationStatus.Raw | null;
        address1?: string | null;
        address2?: string | null;
        postal_code?: string | null;
        city?: string | null;
        region?: string | null;
        country_code?: string | null;
    }
}
